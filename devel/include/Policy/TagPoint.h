// Generated by gencpp from file Policy/TagPoint.msg
// DO NOT EDIT!


#ifndef POLICY_MESSAGE_TAGPOINT_H
#define POLICY_MESSAGE_TAGPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace Policy
{
template <class ContainerAllocator>
struct TagPoint_
{
  typedef TagPoint_<ContainerAllocator> Type;

  TagPoint_()
    : StartPoint(0)
    , EndPoint(0)  {
    }
  TagPoint_(const ContainerAllocator& _alloc)
    : StartPoint(0)
    , EndPoint(0)  {
  (void)_alloc;
    }



   typedef int32_t _StartPoint_type;
  _StartPoint_type StartPoint;

   typedef int32_t _EndPoint_type;
  _EndPoint_type EndPoint;





  typedef boost::shared_ptr< ::Policy::TagPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Policy::TagPoint_<ContainerAllocator> const> ConstPtr;

}; // struct TagPoint_

typedef ::Policy::TagPoint_<std::allocator<void> > TagPoint;

typedef boost::shared_ptr< ::Policy::TagPoint > TagPointPtr;
typedef boost::shared_ptr< ::Policy::TagPoint const> TagPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::Policy::TagPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::Policy::TagPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::Policy::TagPoint_<ContainerAllocator1> & lhs, const ::Policy::TagPoint_<ContainerAllocator2> & rhs)
{
  return lhs.StartPoint == rhs.StartPoint &&
    lhs.EndPoint == rhs.EndPoint;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::Policy::TagPoint_<ContainerAllocator1> & lhs, const ::Policy::TagPoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace Policy

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::Policy::TagPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::Policy::TagPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::Policy::TagPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::Policy::TagPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::Policy::TagPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::Policy::TagPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::Policy::TagPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3041787aa82eb0113d0b1c8705717568";
  }

  static const char* value(const ::Policy::TagPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3041787aa82eb011ULL;
  static const uint64_t static_value2 = 0x3d0b1c8705717568ULL;
};

template<class ContainerAllocator>
struct DataType< ::Policy::TagPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Policy/TagPoint";
  }

  static const char* value(const ::Policy::TagPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::Policy::TagPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 StartPoint\n"
"int32 EndPoint\n"
;
  }

  static const char* value(const ::Policy::TagPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::Policy::TagPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.StartPoint);
      stream.next(m.EndPoint);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TagPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Policy::TagPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::Policy::TagPoint_<ContainerAllocator>& v)
  {
    s << indent << "StartPoint: ";
    Printer<int32_t>::stream(s, indent + "  ", v.StartPoint);
    s << indent << "EndPoint: ";
    Printer<int32_t>::stream(s, indent + "  ", v.EndPoint);
  }
};

} // namespace message_operations
} // namespace ros

#endif // POLICY_MESSAGE_TAGPOINT_H
